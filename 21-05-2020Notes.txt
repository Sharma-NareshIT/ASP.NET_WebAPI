API - POST method
- It can access the insert data by using "FromBody", which uses FormBody that is a Name and Value collection.
- Using Model Object to represent the data.

Syntax:
      public IHttpActionResult AddProduct([FromBody] Product product)
        {
            db.ProductsTable.Add(product);
            db.SaveChanges();
            return Ok();
        }

- You can use the Model Properties to represent the data posted.

 [HttpPost]
        public IHttpActionResult AddProduct([FromBody] string Name, decimal? Price)
        {
            Product product = new Product();
            product.Name = Name;
            product.Price = Price;

            db.ProductsTable.Add(product);
            db.SaveChanges();
            return Ok();
        }

- According to REST standards after posting the data to API controller method it should return "Created" status code [201].

- You can return status code by using "HttpResonseMessage".

- It is the base for Request and Response messages.
- It comprises of 
	a) HttpStatusCode
	b) HttpResponseHeader
	c) HttpRequestMessage
- Request StatusCode can be returned by using 
	a)Request.CreateResponse()
	b)Request.CreateErrorResponse()

- CreateResponse() is used while monitoring the aciton.
- CreateErrorResponse() is used while handling the action.

- Designing POST method in Web API for Development Environment.

Ex:
1. Create API method with HttpResponseMessage

[HttpPost]
        public HttpResponseMessage AddProduct([FromBody] Product product)
        {
            try
            {
                db.ProductsTable.Add(product);
                db.SaveChanges();

                var message = Request.CreateResponse(HttpStatusCode.Created, product);
                return message;
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ex);
            }
        }

2. Open Filder
3. Goto Composer

Request :  POST 
URL :    https://localhost:44305/api/products/AddProduct

User-Agent: Fiddler
Host: localhost:44305
Content-Type: application/json
Accept: application/json


Request Body:
{"Name":"Earpods", "Price":12000.33}

4. Click Execute
5. Double Click on Response URL 
6. Goto Inspector and see the status "Created"


- If method return type "HttpResonseMessage" then it is for development
- If method return type "IHttpActionResult" then it is for production.
- For Production a method can be also defined as Void. If action need not return anything as response and just it have to handle the functionality specified then you can define "void".
- It it is void then it is not an Action method , it is an normal API method, which can also handle requests from client. As at client level it is defined with the request type.

Ex:
 [HttpPost]
        public void AddProduct([FromBody] Product product)
        {
                db.ProductsTable.Add(product);
                db.SaveChanges();
        }
        
        
                                        INdex.html
                                        
                                        <!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Products API</title>
    <style>
        .section {
            margin-top: 50px;
        }
    </style>
    <link rel="stylesheet" href="Content/bootstrap.css" />
    <script src="Scripts/jquery-3.5.1.js"></script>
    <script src="Scripts/bootstrap.bundle.js"></script>
    <script>
        $(function () {
            $("#btnAll").click(function () {
                $.ajax({
                    url: "api/products"
                })
                    .done(function (data) {
                        $.each(data, function (key, value) {
                            $(`<tr><td>${value.ProductId}</td><td>${value.Name}</td><td>${value.Price}</td></tr>`).appendTo("#tbody");
                        })
                    })
                    .fail(function () {
                        alert("Something Went Wrong");
                    })
            })
            $("#btnSearch").click(function () {
                var id = $("#txtId").val();
                var apiUrl = "api/products/" + id;
                $.ajax({
                    url: apiUrl
                })
                    .done(function (data) {
                        $("#lblId").html(data.ProductId);
                        $("#lblName").html(data.Name);
                        $("#lblPrice").html(data.Price);
                    })
                    .fail(function () {
                        alert("Something Went Wrong");
                    })
            })            
            $("#btnAddProduct").click(function () {

                var newProduct = {
                    Name: $("#txtName").val(),
                    Price: parseFloat($("#txtPrice").val())
                };              
                $.ajax({
                    method: "POST",
                    url: "api/products/AddProduct",
                    data: newProduct
                })
                alert("Record Inserted");
                location.reload();
            })
        })
    </script>
</head>
<body>
    <div class="container">
        <h2>Products API</h2>
        <div class="btn-toolbar bg-danger justify-content-between">
            <div class="btn-group">
                <button id="btnAll" class="btn btn-danger">Get All Products</button>
                <button id="btnAdd" class="btn btn-danger" data-toggle="modal" data-target="#dialogAddProduct">Add Product</button>
            </div>
            <div class="btn-group">
                <input type="text" id="txtId" class="form-control" placeholder="Product Id" />
                <button id="btnSearch" class="btn btn-danger">Search</button>
            </div>
        </div>
        <div class="modal fade" id="dialogAddProduct" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Add New Product</h3>
                        <button type="button" class="close" data-dismiss="modal">x</button>
                    </div>
                    <div class="modal-body">
                        <dl>
                            <dt>Name</dt>
                            <dd><input type="text" id="txtName" class="form-control" /></dd>
                            <dt>Price</dt>
                            <dd><input type="text" id="txtPrice" class="form-control" /></dd>
                        </dl>
                    </div>
                    <div class="modal-footer">
                        <button id="btnAddProduct" class="btn btn-primary">Add</button>
                        <button class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="section">
            <div class="row">
                <div class="col-6">
                    <h3>Products List</h3>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product Id</th>
                                <th>Name</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody id="tbody">
                        </tbody>
                    </table>
                </div>
                <div class="col-4">
                    <h3>Details</h3>
                    <dl>
                        <dt>Product Id</dt>
                        <dd id="lblId"></dd>
                        <dt>Name</dt>
                        <dd id="lblName"></dd>
                        <dt>Price</dt>
                        <dd id="lblPrice"></dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
